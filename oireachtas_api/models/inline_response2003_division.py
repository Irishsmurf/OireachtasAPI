# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2003Division(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_bill': 'bool',
        'debate': 'InlineResponse2003DivisionDebate',
        'vote_id': 'str',
        '_datetime': 'object',
        'tallies': 'InlineResponse2003DivisionTallies',
        'chamber': 'InlineResponse200BillOriginHouse',
        'category': 'str',
        'subject': 'InlineResponse2003DivisionSubject',
        'uri': 'str',
        'outcome': 'str',
        'tellers': 'str',
        'house': 'InlineResponse2003DivisionHouse',
        '_date': 'str'
    }

    attribute_map = {
        'is_bill': 'isBill',
        'debate': 'debate',
        'vote_id': 'voteId',
        '_datetime': 'datetime',
        'tallies': 'tallies',
        'chamber': 'chamber',
        'category': 'category',
        'subject': 'subject',
        'uri': 'uri',
        'outcome': 'outcome',
        'tellers': 'tellers',
        'house': 'house',
        '_date': 'date'
    }

    def __init__(self, is_bill=None, debate=None, vote_id=None, _datetime=None, tallies=None, chamber=None, category=None, subject=None, uri=None, outcome=None, tellers=None, house=None, _date=None):  # noqa: E501
        """InlineResponse2003Division - a model defined in Swagger"""  # noqa: E501

        self._is_bill = None
        self._debate = None
        self._vote_id = None
        self.__datetime = None
        self._tallies = None
        self._chamber = None
        self._category = None
        self._subject = None
        self._uri = None
        self._outcome = None
        self._tellers = None
        self._house = None
        self.__date = None
        self.discriminator = None

        self.is_bill = is_bill
        self.debate = debate
        self.vote_id = vote_id
        self._datetime = _datetime
        self.tallies = tallies
        self.chamber = chamber
        self.category = category
        self.subject = subject
        self.uri = uri
        self.outcome = outcome
        self.tellers = tellers
        self.house = house
        self._date = _date

    @property
    def is_bill(self):
        """Gets the is_bill of this InlineResponse2003Division.  # noqa: E501


        :return: The is_bill of this InlineResponse2003Division.  # noqa: E501
        :rtype: bool
        """
        return self._is_bill

    @is_bill.setter
    def is_bill(self, is_bill):
        """Sets the is_bill of this InlineResponse2003Division.


        :param is_bill: The is_bill of this InlineResponse2003Division.  # noqa: E501
        :type: bool
        """
        if is_bill is None:
            raise ValueError("Invalid value for `is_bill`, must not be `None`")  # noqa: E501

        self._is_bill = is_bill

    @property
    def debate(self):
        """Gets the debate of this InlineResponse2003Division.  # noqa: E501


        :return: The debate of this InlineResponse2003Division.  # noqa: E501
        :rtype: InlineResponse2003DivisionDebate
        """
        return self._debate

    @debate.setter
    def debate(self, debate):
        """Sets the debate of this InlineResponse2003Division.


        :param debate: The debate of this InlineResponse2003Division.  # noqa: E501
        :type: InlineResponse2003DivisionDebate
        """
        if debate is None:
            raise ValueError("Invalid value for `debate`, must not be `None`")  # noqa: E501

        self._debate = debate

    @property
    def vote_id(self):
        """Gets the vote_id of this InlineResponse2003Division.  # noqa: E501


        :return: The vote_id of this InlineResponse2003Division.  # noqa: E501
        :rtype: str
        """
        return self._vote_id

    @vote_id.setter
    def vote_id(self, vote_id):
        """Sets the vote_id of this InlineResponse2003Division.


        :param vote_id: The vote_id of this InlineResponse2003Division.  # noqa: E501
        :type: str
        """
        if vote_id is None:
            raise ValueError("Invalid value for `vote_id`, must not be `None`")  # noqa: E501

        self._vote_id = vote_id

    @property
    def _datetime(self):
        """Gets the _datetime of this InlineResponse2003Division.  # noqa: E501


        :return: The _datetime of this InlineResponse2003Division.  # noqa: E501
        :rtype: object
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this InlineResponse2003Division.


        :param _datetime: The _datetime of this InlineResponse2003Division.  # noqa: E501
        :type: object
        """
        if _datetime is None:
            raise ValueError("Invalid value for `_datetime`, must not be `None`")  # noqa: E501

        self.__datetime = _datetime

    @property
    def tallies(self):
        """Gets the tallies of this InlineResponse2003Division.  # noqa: E501


        :return: The tallies of this InlineResponse2003Division.  # noqa: E501
        :rtype: InlineResponse2003DivisionTallies
        """
        return self._tallies

    @tallies.setter
    def tallies(self, tallies):
        """Sets the tallies of this InlineResponse2003Division.


        :param tallies: The tallies of this InlineResponse2003Division.  # noqa: E501
        :type: InlineResponse2003DivisionTallies
        """
        if tallies is None:
            raise ValueError("Invalid value for `tallies`, must not be `None`")  # noqa: E501

        self._tallies = tallies

    @property
    def chamber(self):
        """Gets the chamber of this InlineResponse2003Division.  # noqa: E501


        :return: The chamber of this InlineResponse2003Division.  # noqa: E501
        :rtype: InlineResponse200BillOriginHouse
        """
        return self._chamber

    @chamber.setter
    def chamber(self, chamber):
        """Sets the chamber of this InlineResponse2003Division.


        :param chamber: The chamber of this InlineResponse2003Division.  # noqa: E501
        :type: InlineResponse200BillOriginHouse
        """
        if chamber is None:
            raise ValueError("Invalid value for `chamber`, must not be `None`")  # noqa: E501

        self._chamber = chamber

    @property
    def category(self):
        """Gets the category of this InlineResponse2003Division.  # noqa: E501


        :return: The category of this InlineResponse2003Division.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse2003Division.


        :param category: The category of this InlineResponse2003Division.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def subject(self):
        """Gets the subject of this InlineResponse2003Division.  # noqa: E501


        :return: The subject of this InlineResponse2003Division.  # noqa: E501
        :rtype: InlineResponse2003DivisionSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this InlineResponse2003Division.


        :param subject: The subject of this InlineResponse2003Division.  # noqa: E501
        :type: InlineResponse2003DivisionSubject
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def uri(self):
        """Gets the uri of this InlineResponse2003Division.  # noqa: E501


        :return: The uri of this InlineResponse2003Division.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse2003Division.


        :param uri: The uri of this InlineResponse2003Division.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501
        if uri is not None and not re.search(r'^\/ie\/oireachtas\/division\/(house|committee)\/(seanad|dail)\/[0-9]+\/', uri):  # noqa: E501
            raise ValueError(r"Invalid value for `uri`, must be a follow pattern or equal to `/^\/ie\/oireachtas\/division\/(house|committee)\/(seanad|dail)\/[0-9]+\//`")  # noqa: E501

        self._uri = uri

    @property
    def outcome(self):
        """Gets the outcome of this InlineResponse2003Division.  # noqa: E501


        :return: The outcome of this InlineResponse2003Division.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this InlineResponse2003Division.


        :param outcome: The outcome of this InlineResponse2003Division.  # noqa: E501
        :type: str
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")  # noqa: E501

        self._outcome = outcome

    @property
    def tellers(self):
        """Gets the tellers of this InlineResponse2003Division.  # noqa: E501


        :return: The tellers of this InlineResponse2003Division.  # noqa: E501
        :rtype: str
        """
        return self._tellers

    @tellers.setter
    def tellers(self, tellers):
        """Sets the tellers of this InlineResponse2003Division.


        :param tellers: The tellers of this InlineResponse2003Division.  # noqa: E501
        :type: str
        """
        if tellers is None:
            raise ValueError("Invalid value for `tellers`, must not be `None`")  # noqa: E501

        self._tellers = tellers

    @property
    def house(self):
        """Gets the house of this InlineResponse2003Division.  # noqa: E501


        :return: The house of this InlineResponse2003Division.  # noqa: E501
        :rtype: InlineResponse2003DivisionHouse
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this InlineResponse2003Division.


        :param house: The house of this InlineResponse2003Division.  # noqa: E501
        :type: InlineResponse2003DivisionHouse
        """
        if house is None:
            raise ValueError("Invalid value for `house`, must not be `None`")  # noqa: E501

        self._house = house

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2003Division.  # noqa: E501


        :return: The _date of this InlineResponse2003Division.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2003Division.


        :param _date: The _date of this InlineResponse2003Division.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501
        if _date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', _date):  # noqa: E501
            raise ValueError(r"Invalid value for `_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")  # noqa: E501

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Division, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Division):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
