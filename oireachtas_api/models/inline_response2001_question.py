# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001Question(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_number': 'int',
        'uri': 'str',
        'question_type': 'str',
        'by': 'InlineResponse2001QuestionBy',
        '_date': 'str',
        'debate_section': 'InlineResponse2001QuestionDebateSection',
        'show_as': 'str',
        'answer_text': 'str',
        'to': 'InlineResponse2001QuestionTo'
    }

    attribute_map = {
        'question_number': 'questionNumber',
        'uri': 'uri',
        'question_type': 'questionType',
        'by': 'by',
        '_date': 'date',
        'debate_section': 'debateSection',
        'show_as': 'showAs',
        'answer_text': 'answerText',
        'to': 'to'
    }

    def __init__(self, question_number=None, uri=None, question_type=None, by=None, _date=None, debate_section=None, show_as=None, answer_text=None, to=None):  # noqa: E501
        """InlineResponse2001Question - a model defined in Swagger"""  # noqa: E501

        self._question_number = None
        self._uri = None
        self._question_type = None
        self._by = None
        self.__date = None
        self._debate_section = None
        self._show_as = None
        self._answer_text = None
        self._to = None
        self.discriminator = None

        self.question_number = question_number
        self.uri = uri
        self.question_type = question_type
        self.by = by
        self._date = _date
        self.debate_section = debate_section
        self.show_as = show_as
        if answer_text is not None:
            self.answer_text = answer_text
        self.to = to

    @property
    def question_number(self):
        """Gets the question_number of this InlineResponse2001Question.  # noqa: E501


        :return: The question_number of this InlineResponse2001Question.  # noqa: E501
        :rtype: int
        """
        return self._question_number

    @question_number.setter
    def question_number(self, question_number):
        """Sets the question_number of this InlineResponse2001Question.


        :param question_number: The question_number of this InlineResponse2001Question.  # noqa: E501
        :type: int
        """
        if question_number is None:
            raise ValueError("Invalid value for `question_number`, must not be `None`")  # noqa: E501

        self._question_number = question_number

    @property
    def uri(self):
        """Gets the uri of this InlineResponse2001Question.  # noqa: E501


        :return: The uri of this InlineResponse2001Question.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse2001Question.


        :param uri: The uri of this InlineResponse2001Question.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501
        if uri is not None and not re.search(r'^\/ie\/oireachtas\/question\/[0-9]{4}-[0-9]{2}-[0-9]{2}\/pq_[0-9]+$', uri):  # noqa: E501
            raise ValueError(r"Invalid value for `uri`, must be a follow pattern or equal to `/^\/ie\/oireachtas\/question\/[0-9]{4}-[0-9]{2}-[0-9]{2}\/pq_[0-9]+$/`")  # noqa: E501

        self._uri = uri

    @property
    def question_type(self):
        """Gets the question_type of this InlineResponse2001Question.  # noqa: E501


        :return: The question_type of this InlineResponse2001Question.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this InlineResponse2001Question.


        :param question_type: The question_type of this InlineResponse2001Question.  # noqa: E501
        :type: str
        """
        if question_type is None:
            raise ValueError("Invalid value for `question_type`, must not be `None`")  # noqa: E501
        allowed_values = ["oral", "written"]  # noqa: E501
        if question_type not in allowed_values:
            raise ValueError(
                "Invalid value for `question_type` ({0}), must be one of {1}"  # noqa: E501
                .format(question_type, allowed_values)
            )

        self._question_type = question_type

    @property
    def by(self):
        """Gets the by of this InlineResponse2001Question.  # noqa: E501


        :return: The by of this InlineResponse2001Question.  # noqa: E501
        :rtype: InlineResponse2001QuestionBy
        """
        return self._by

    @by.setter
    def by(self, by):
        """Sets the by of this InlineResponse2001Question.


        :param by: The by of this InlineResponse2001Question.  # noqa: E501
        :type: InlineResponse2001QuestionBy
        """
        if by is None:
            raise ValueError("Invalid value for `by`, must not be `None`")  # noqa: E501

        self._by = by

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2001Question.  # noqa: E501


        :return: The _date of this InlineResponse2001Question.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2001Question.


        :param _date: The _date of this InlineResponse2001Question.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def debate_section(self):
        """Gets the debate_section of this InlineResponse2001Question.  # noqa: E501


        :return: The debate_section of this InlineResponse2001Question.  # noqa: E501
        :rtype: InlineResponse2001QuestionDebateSection
        """
        return self._debate_section

    @debate_section.setter
    def debate_section(self, debate_section):
        """Sets the debate_section of this InlineResponse2001Question.


        :param debate_section: The debate_section of this InlineResponse2001Question.  # noqa: E501
        :type: InlineResponse2001QuestionDebateSection
        """
        if debate_section is None:
            raise ValueError("Invalid value for `debate_section`, must not be `None`")  # noqa: E501

        self._debate_section = debate_section

    @property
    def show_as(self):
        """Gets the show_as of this InlineResponse2001Question.  # noqa: E501


        :return: The show_as of this InlineResponse2001Question.  # noqa: E501
        :rtype: str
        """
        return self._show_as

    @show_as.setter
    def show_as(self, show_as):
        """Sets the show_as of this InlineResponse2001Question.


        :param show_as: The show_as of this InlineResponse2001Question.  # noqa: E501
        :type: str
        """
        if show_as is None:
            raise ValueError("Invalid value for `show_as`, must not be `None`")  # noqa: E501

        self._show_as = show_as

    @property
    def answer_text(self):
        """Gets the answer_text of this InlineResponse2001Question.  # noqa: E501


        :return: The answer_text of this InlineResponse2001Question.  # noqa: E501
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this InlineResponse2001Question.


        :param answer_text: The answer_text of this InlineResponse2001Question.  # noqa: E501
        :type: str
        """

        self._answer_text = answer_text

    @property
    def to(self):
        """Gets the to of this InlineResponse2001Question.  # noqa: E501


        :return: The to of this InlineResponse2001Question.  # noqa: E501
        :rtype: InlineResponse2001QuestionTo
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InlineResponse2001Question.


        :param to: The to of this InlineResponse2001Question.  # noqa: E501
        :type: InlineResponse2001QuestionTo
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Question, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Question):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
