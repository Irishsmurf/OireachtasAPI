# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2002DebateRecordDebateSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'list[Paths1debatesgetresponses200schemapropertiesresultsitemsdefinitionsdebateText]',
        'show_as': 'str',
        'debate_type': 'str',
        'counts': 'InlineResponse2002DebateRecordDebateSectionCounts',
        'speakers': 'list[InlineResponse2002DebateRecordDebateSectionSpeakers]',
        'bill': 'object',
        'contains_debate': 'bool',
        'uri': 'str',
        'debate_section_id': 'str',
        'formats': 'InlineResponse2001QuestionDebateSectionFormats',
        'parent_debate_section': 'object'
    }

    attribute_map = {
        'text': 'text',
        'show_as': 'showAs',
        'debate_type': 'debateType',
        'counts': 'counts',
        'speakers': 'speakers',
        'bill': 'bill',
        'contains_debate': 'containsDebate',
        'uri': 'uri',
        'debate_section_id': 'debateSectionId',
        'formats': 'formats',
        'parent_debate_section': 'parentDebateSection'
    }

    def __init__(self, text=None, show_as=None, debate_type=None, counts=None, speakers=None, bill=None, contains_debate=None, uri=None, debate_section_id=None, formats=None, parent_debate_section=None):  # noqa: E501
        """InlineResponse2002DebateRecordDebateSection - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._show_as = None
        self._debate_type = None
        self._counts = None
        self._speakers = None
        self._bill = None
        self._contains_debate = None
        self._uri = None
        self._debate_section_id = None
        self._formats = None
        self._parent_debate_section = None
        self.discriminator = None

        if text is not None:
            self.text = text
        self.show_as = show_as
        self.debate_type = debate_type
        self.counts = counts
        if speakers is not None:
            self.speakers = speakers
        self.bill = bill
        self.contains_debate = contains_debate
        self.uri = uri
        if debate_section_id is not None:
            self.debate_section_id = debate_section_id
        if formats is not None:
            self.formats = formats
        self.parent_debate_section = parent_debate_section

    @property
    def text(self):
        """Gets the text of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The text of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: list[Paths1debatesgetresponses200schemapropertiesresultsitemsdefinitionsdebateText]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineResponse2002DebateRecordDebateSection.


        :param text: The text of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: list[Paths1debatesgetresponses200schemapropertiesresultsitemsdefinitionsdebateText]
        """

        self._text = text

    @property
    def show_as(self):
        """Gets the show_as of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The show_as of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: str
        """
        return self._show_as

    @show_as.setter
    def show_as(self, show_as):
        """Sets the show_as of this InlineResponse2002DebateRecordDebateSection.


        :param show_as: The show_as of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: str
        """
        if show_as is None:
            raise ValueError("Invalid value for `show_as`, must not be `None`")  # noqa: E501

        self._show_as = show_as

    @property
    def debate_type(self):
        """Gets the debate_type of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The debate_type of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: str
        """
        return self._debate_type

    @debate_type.setter
    def debate_type(self, debate_type):
        """Sets the debate_type of this InlineResponse2002DebateRecordDebateSection.


        :param debate_type: The debate_type of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: str
        """
        if debate_type is None:
            raise ValueError("Invalid value for `debate_type`, must not be `None`")  # noqa: E501

        self._debate_type = debate_type

    @property
    def counts(self):
        """Gets the counts of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The counts of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: InlineResponse2002DebateRecordDebateSectionCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this InlineResponse2002DebateRecordDebateSection.


        :param counts: The counts of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: InlineResponse2002DebateRecordDebateSectionCounts
        """
        if counts is None:
            raise ValueError("Invalid value for `counts`, must not be `None`")  # noqa: E501

        self._counts = counts

    @property
    def speakers(self):
        """Gets the speakers of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The speakers of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: list[InlineResponse2002DebateRecordDebateSectionSpeakers]
        """
        return self._speakers

    @speakers.setter
    def speakers(self, speakers):
        """Sets the speakers of this InlineResponse2002DebateRecordDebateSection.


        :param speakers: The speakers of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: list[InlineResponse2002DebateRecordDebateSectionSpeakers]
        """

        self._speakers = speakers

    @property
    def bill(self):
        """Gets the bill of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The bill of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: object
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this InlineResponse2002DebateRecordDebateSection.


        :param bill: The bill of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: object
        """
        if bill is None:
            raise ValueError("Invalid value for `bill`, must not be `None`")  # noqa: E501

        self._bill = bill

    @property
    def contains_debate(self):
        """Gets the contains_debate of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The contains_debate of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: bool
        """
        return self._contains_debate

    @contains_debate.setter
    def contains_debate(self, contains_debate):
        """Sets the contains_debate of this InlineResponse2002DebateRecordDebateSection.


        :param contains_debate: The contains_debate of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: bool
        """
        if contains_debate is None:
            raise ValueError("Invalid value for `contains_debate`, must not be `None`")  # noqa: E501

        self._contains_debate = contains_debate

    @property
    def uri(self):
        """Gets the uri of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The uri of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse2002DebateRecordDebateSection.


        :param uri: The uri of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def debate_section_id(self):
        """Gets the debate_section_id of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The debate_section_id of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: str
        """
        return self._debate_section_id

    @debate_section_id.setter
    def debate_section_id(self, debate_section_id):
        """Sets the debate_section_id of this InlineResponse2002DebateRecordDebateSection.


        :param debate_section_id: The debate_section_id of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: str
        """

        self._debate_section_id = debate_section_id

    @property
    def formats(self):
        """Gets the formats of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The formats of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: InlineResponse2001QuestionDebateSectionFormats
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this InlineResponse2002DebateRecordDebateSection.


        :param formats: The formats of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: InlineResponse2001QuestionDebateSectionFormats
        """

        self._formats = formats

    @property
    def parent_debate_section(self):
        """Gets the parent_debate_section of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501


        :return: The parent_debate_section of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :rtype: object
        """
        return self._parent_debate_section

    @parent_debate_section.setter
    def parent_debate_section(self, parent_debate_section):
        """Sets the parent_debate_section of this InlineResponse2002DebateRecordDebateSection.


        :param parent_debate_section: The parent_debate_section of this InlineResponse2002DebateRecordDebateSection.  # noqa: E501
        :type: object
        """
        if parent_debate_section is None:
            raise ValueError("Invalid value for `parent_debate_section`, must not be `None`")  # noqa: E501

        self._parent_debate_section = parent_debate_section

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002DebateRecordDebateSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002DebateRecordDebateSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
