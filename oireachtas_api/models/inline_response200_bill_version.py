# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200BillVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'formats': 'Paths1legislationgetresponses200schemapropertiesresultsitemsdefinitionsversionFormats',
        'text': 'str',
        'lang': 'str',
        'show_as': 'str',
        'uri': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'formats': 'formats',
        'text': 'text',
        'lang': 'lang',
        'show_as': 'showAs',
        'uri': 'uri'
    }

    def __init__(self, _date=None, formats=None, text=None, lang=None, show_as=None, uri=None):  # noqa: E501
        """InlineResponse200BillVersion - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._formats = None
        self._text = None
        self._lang = None
        self._show_as = None
        self._uri = None
        self.discriminator = None

        self._date = _date
        self.formats = formats
        if text is not None:
            self.text = text
        self.lang = lang
        self.show_as = show_as
        self.uri = uri

    @property
    def _date(self):
        """Gets the _date of this InlineResponse200BillVersion.  # noqa: E501


        :return: The _date of this InlineResponse200BillVersion.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse200BillVersion.


        :param _date: The _date of this InlineResponse200BillVersion.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def formats(self):
        """Gets the formats of this InlineResponse200BillVersion.  # noqa: E501


        :return: The formats of this InlineResponse200BillVersion.  # noqa: E501
        :rtype: Paths1legislationgetresponses200schemapropertiesresultsitemsdefinitionsversionFormats
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this InlineResponse200BillVersion.


        :param formats: The formats of this InlineResponse200BillVersion.  # noqa: E501
        :type: Paths1legislationgetresponses200schemapropertiesresultsitemsdefinitionsversionFormats
        """
        if formats is None:
            raise ValueError("Invalid value for `formats`, must not be `None`")  # noqa: E501

        self._formats = formats

    @property
    def text(self):
        """Gets the text of this InlineResponse200BillVersion.  # noqa: E501


        :return: The text of this InlineResponse200BillVersion.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineResponse200BillVersion.


        :param text: The text of this InlineResponse200BillVersion.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def lang(self):
        """Gets the lang of this InlineResponse200BillVersion.  # noqa: E501


        :return: The lang of this InlineResponse200BillVersion.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this InlineResponse200BillVersion.


        :param lang: The lang of this InlineResponse200BillVersion.  # noqa: E501
        :type: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501
        allowed_values = ["eng", "gle"]  # noqa: E501
        if lang not in allowed_values:
            raise ValueError(
                "Invalid value for `lang` ({0}), must be one of {1}"  # noqa: E501
                .format(lang, allowed_values)
            )

        self._lang = lang

    @property
    def show_as(self):
        """Gets the show_as of this InlineResponse200BillVersion.  # noqa: E501


        :return: The show_as of this InlineResponse200BillVersion.  # noqa: E501
        :rtype: str
        """
        return self._show_as

    @show_as.setter
    def show_as(self, show_as):
        """Sets the show_as of this InlineResponse200BillVersion.


        :param show_as: The show_as of this InlineResponse200BillVersion.  # noqa: E501
        :type: str
        """
        if show_as is None:
            raise ValueError("Invalid value for `show_as`, must not be `None`")  # noqa: E501

        self._show_as = show_as

    @property
    def uri(self):
        """Gets the uri of this InlineResponse200BillVersion.  # noqa: E501


        :return: The uri of this InlineResponse200BillVersion.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse200BillVersion.


        :param uri: The uri of this InlineResponse200BillVersion.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200BillVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200BillVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
