# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse2004Member(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_as': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'gender': 'str',
        'memberships': 'list[InlineResponse2004MemberMemberships]',
        'uri': 'str',
        'wiki_title': 'str',
        'full_name': 'str',
        'member_code': 'str',
        'image': 'bool',
        'p_id': 'str'
    }

    attribute_map = {
        'show_as': 'showAs',
        'last_name': 'lastName',
        'first_name': 'firstName',
        'gender': 'gender',
        'memberships': 'memberships',
        'uri': 'uri',
        'wiki_title': 'wikiTitle',
        'full_name': 'fullName',
        'member_code': 'memberCode',
        'image': 'image',
        'p_id': 'pId'
    }

    def __init__(self, show_as=None, last_name=None, first_name=None, gender=None, memberships=None, uri=None, wiki_title=None, full_name=None, member_code=None, image=None, p_id=None, _configuration=None):  # noqa: E501
        """InlineResponse2004Member - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._show_as = None
        self._last_name = None
        self._first_name = None
        self._gender = None
        self._memberships = None
        self._uri = None
        self._wiki_title = None
        self._full_name = None
        self._member_code = None
        self._image = None
        self._p_id = None
        self.discriminator = None

        if show_as is not None:
            self.show_as = show_as
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if gender is not None:
            self.gender = gender
        if memberships is not None:
            self.memberships = memberships
        if uri is not None:
            self.uri = uri
        if wiki_title is not None:
            self.wiki_title = wiki_title
        if full_name is not None:
            self.full_name = full_name
        if member_code is not None:
            self.member_code = member_code
        if image is not None:
            self.image = image
        if p_id is not None:
            self.p_id = p_id

    @property
    def show_as(self):
        """Gets the show_as of this InlineResponse2004Member.  # noqa: E501


        :return: The show_as of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._show_as

    @show_as.setter
    def show_as(self, show_as):
        """Sets the show_as of this InlineResponse2004Member.


        :param show_as: The show_as of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._show_as = show_as

    @property
    def last_name(self):
        """Gets the last_name of this InlineResponse2004Member.  # noqa: E501


        :return: The last_name of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this InlineResponse2004Member.


        :param last_name: The last_name of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this InlineResponse2004Member.  # noqa: E501


        :return: The first_name of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this InlineResponse2004Member.


        :param first_name: The first_name of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this InlineResponse2004Member.  # noqa: E501


        :return: The gender of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this InlineResponse2004Member.


        :param gender: The gender of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def memberships(self):
        """Gets the memberships of this InlineResponse2004Member.  # noqa: E501


        :return: The memberships of this InlineResponse2004Member.  # noqa: E501
        :rtype: list[InlineResponse2004MemberMemberships]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this InlineResponse2004Member.


        :param memberships: The memberships of this InlineResponse2004Member.  # noqa: E501
        :type: list[InlineResponse2004MemberMemberships]
        """

        self._memberships = memberships

    @property
    def uri(self):
        """Gets the uri of this InlineResponse2004Member.  # noqa: E501


        :return: The uri of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse2004Member.


        :param uri: The uri of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def wiki_title(self):
        """Gets the wiki_title of this InlineResponse2004Member.  # noqa: E501


        :return: The wiki_title of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._wiki_title

    @wiki_title.setter
    def wiki_title(self, wiki_title):
        """Sets the wiki_title of this InlineResponse2004Member.


        :param wiki_title: The wiki_title of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._wiki_title = wiki_title

    @property
    def full_name(self):
        """Gets the full_name of this InlineResponse2004Member.  # noqa: E501


        :return: The full_name of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this InlineResponse2004Member.


        :param full_name: The full_name of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def member_code(self):
        """Gets the member_code of this InlineResponse2004Member.  # noqa: E501


        :return: The member_code of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._member_code

    @member_code.setter
    def member_code(self, member_code):
        """Sets the member_code of this InlineResponse2004Member.


        :param member_code: The member_code of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._member_code = member_code

    @property
    def image(self):
        """Gets the image of this InlineResponse2004Member.  # noqa: E501


        :return: The image of this InlineResponse2004Member.  # noqa: E501
        :rtype: bool
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this InlineResponse2004Member.


        :param image: The image of this InlineResponse2004Member.  # noqa: E501
        :type: bool
        """

        self._image = image

    @property
    def p_id(self):
        """Gets the p_id of this InlineResponse2004Member.  # noqa: E501


        :return: The p_id of this InlineResponse2004Member.  # noqa: E501
        :rtype: str
        """
        return self._p_id

    @p_id.setter
    def p_id(self, p_id):
        """Sets the p_id of this InlineResponse2004Member.


        :param p_id: The p_id of this InlineResponse2004Member.  # noqa: E501
        :type: str
        """

        self._p_id = p_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004Member, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004Member):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2004Member):
            return True

        return self.to_dict() != other.to_dict()
