# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse2002DebateRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated': 'datetime',
        'chamber': 'InlineResponse2002DebateRecordChamber',
        'house': 'InlineResponse2002DebateRecordHouse',
        'counts': 'InlineResponse2002DebateRecordCounts',
        'uri': 'str',
        'formats': 'Paths1debatesgetresponses200schemapropertiesresultsitemsdefinitionsdebateFormats',
        'debate_sections': 'list[InlineResponse2002DebateRecordDebateSections]',
        '_date': 'str'
    }

    attribute_map = {
        'last_updated': 'lastUpdated',
        'chamber': 'chamber',
        'house': 'house',
        'counts': 'counts',
        'uri': 'uri',
        'formats': 'formats',
        'debate_sections': 'debateSections',
        '_date': 'date'
    }

    def __init__(self, last_updated=None, chamber=None, house=None, counts=None, uri=None, formats=None, debate_sections=None, _date=None, _configuration=None):  # noqa: E501
        """InlineResponse2002DebateRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_updated = None
        self._chamber = None
        self._house = None
        self._counts = None
        self._uri = None
        self._formats = None
        self._debate_sections = None
        self.__date = None
        self.discriminator = None

        self.last_updated = last_updated
        self.chamber = chamber
        self.house = house
        self.counts = counts
        self.uri = uri
        self.formats = formats
        self.debate_sections = debate_sections
        self._date = _date

    @property
    def last_updated(self):
        """Gets the last_updated of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The last_updated of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this InlineResponse2002DebateRecord.


        :param last_updated: The last_updated of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def chamber(self):
        """Gets the chamber of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The chamber of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: InlineResponse2002DebateRecordChamber
        """
        return self._chamber

    @chamber.setter
    def chamber(self, chamber):
        """Sets the chamber of this InlineResponse2002DebateRecord.


        :param chamber: The chamber of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: InlineResponse2002DebateRecordChamber
        """
        if self._configuration.client_side_validation and chamber is None:
            raise ValueError("Invalid value for `chamber`, must not be `None`")  # noqa: E501

        self._chamber = chamber

    @property
    def house(self):
        """Gets the house of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The house of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: InlineResponse2002DebateRecordHouse
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this InlineResponse2002DebateRecord.


        :param house: The house of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: InlineResponse2002DebateRecordHouse
        """
        if self._configuration.client_side_validation and house is None:
            raise ValueError("Invalid value for `house`, must not be `None`")  # noqa: E501

        self._house = house

    @property
    def counts(self):
        """Gets the counts of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The counts of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: InlineResponse2002DebateRecordCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this InlineResponse2002DebateRecord.


        :param counts: The counts of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: InlineResponse2002DebateRecordCounts
        """
        if self._configuration.client_side_validation and counts is None:
            raise ValueError("Invalid value for `counts`, must not be `None`")  # noqa: E501

        self._counts = counts

    @property
    def uri(self):
        """Gets the uri of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The uri of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InlineResponse2002DebateRecord.


        :param uri: The uri of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def formats(self):
        """Gets the formats of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The formats of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: Paths1debatesgetresponses200schemapropertiesresultsitemsdefinitionsdebateFormats
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this InlineResponse2002DebateRecord.


        :param formats: The formats of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: Paths1debatesgetresponses200schemapropertiesresultsitemsdefinitionsdebateFormats
        """
        if self._configuration.client_side_validation and formats is None:
            raise ValueError("Invalid value for `formats`, must not be `None`")  # noqa: E501

        self._formats = formats

    @property
    def debate_sections(self):
        """Gets the debate_sections of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The debate_sections of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: list[InlineResponse2002DebateRecordDebateSections]
        """
        return self._debate_sections

    @debate_sections.setter
    def debate_sections(self, debate_sections):
        """Sets the debate_sections of this InlineResponse2002DebateRecord.


        :param debate_sections: The debate_sections of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: list[InlineResponse2002DebateRecordDebateSections]
        """
        if self._configuration.client_side_validation and debate_sections is None:
            raise ValueError("Invalid value for `debate_sections`, must not be `None`")  # noqa: E501

        self._debate_sections = debate_sections

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2002DebateRecord.  # noqa: E501


        :return: The _date of this InlineResponse2002DebateRecord.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2002DebateRecord.


        :param _date: The _date of this InlineResponse2002DebateRecord.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002DebateRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002DebateRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2002DebateRecord):
            return True

        return self.to_dict() != other.to_dict()
