# coding: utf-8

"""
    Houses of the Oireachtas Open Data APIs

    The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: open.data@oireachtas.ie
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LegislationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def legislation(self, **kwargs):  # noqa: E501
        """Legislation API  # noqa: E501

        Returns list of bills filtered by the base and additional parameters. The list supports paging. #### Indexes * billsbook_meta  #### Mapping * Start Date - Greater Than or Equal To - bill.mostRecentStage.event.dates.date * End Date - Less Than or Equal To - bill.mostRecentStage.event.dates.date * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records * Status - Equal To - bill.status * Source - Equal To - bill.source *   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.legislation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] bill_status: An array which is used to filter legislation by status detailed in default settings below.  Separated by comma.
        :param list[str] bill_source: An array used to filter legislation by origin source.
        :param date date_start: This is a base filter which is used on many APIs, allowing filtering by Start Date related to the Section.
        :param date date_end: This is a base filter which is used on many APIs, allowing filtering by End Date related to the Section.
        :param int skip: This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
        :param int limit: This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
        :param str member_id: Filter by Member uri.
        :param str bill_id: Filter results by Bill URI Example   /ie/oireachtas/bill/2016/2 
        :param str bill_no: Filter Bill by number.
        :param str bill_year: Filter Bill by year.
        :param list[str] chamber_id: Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32 
        :param str act_year: Filter Bill by Act year.
        :param str act_no: Filter Bill by Act number.
        :param str lang: language of document to extract. Defaults to English (en)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.legislation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.legislation_with_http_info(**kwargs)  # noqa: E501
            return data

    def legislation_with_http_info(self, **kwargs):  # noqa: E501
        """Legislation API  # noqa: E501

        Returns list of bills filtered by the base and additional parameters. The list supports paging. #### Indexes * billsbook_meta  #### Mapping * Start Date - Greater Than or Equal To - bill.mostRecentStage.event.dates.date * End Date - Less Than or Equal To - bill.mostRecentStage.event.dates.date * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records * Status - Equal To - bill.status * Source - Equal To - bill.source *   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.legislation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] bill_status: An array which is used to filter legislation by status detailed in default settings below.  Separated by comma.
        :param list[str] bill_source: An array used to filter legislation by origin source.
        :param date date_start: This is a base filter which is used on many APIs, allowing filtering by Start Date related to the Section.
        :param date date_end: This is a base filter which is used on many APIs, allowing filtering by End Date related to the Section.
        :param int skip: This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
        :param int limit: This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
        :param str member_id: Filter by Member uri.
        :param str bill_id: Filter results by Bill URI Example   /ie/oireachtas/bill/2016/2 
        :param str bill_no: Filter Bill by number.
        :param str bill_year: Filter Bill by year.
        :param list[str] chamber_id: Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32 
        :param str act_year: Filter Bill by Act year.
        :param str act_no: Filter Bill by Act number.
        :param str lang: language of document to extract. Defaults to English (en)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bill_status', 'bill_source', 'date_start', 'date_end', 'skip', 'limit', 'member_id', 'bill_id', 'bill_no', 'bill_year', 'chamber_id', 'act_year', 'act_no', 'lang']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method legislation" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('bill_status' in params and
                                            len(params['bill_status']) > 6):
            raise ValueError("Invalid value for parameter `bill_status` when calling `legislation`, number of items must be less than or equal to `6`")  # noqa: E501
        if self.api_client.client_side_validation and ('bill_status' in params and
                                            len(params['bill_status']) < 0):
            raise ValueError("Invalid value for parameter `bill_status` when calling `legislation`, number of items must be greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('bill_source' in params and
                                            len(params['bill_source']) > 2):
            raise ValueError("Invalid value for parameter `bill_source` when calling `legislation`, number of items must be less than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('bill_source' in params and
                                            len(params['bill_source']) < 0):
            raise ValueError("Invalid value for parameter `bill_source` when calling `legislation`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bill_status' in params:
            query_params.append(('bill_status', params['bill_status']))  # noqa: E501
            collection_formats['bill_status'] = 'csv'  # noqa: E501
        if 'bill_source' in params:
            query_params.append(('bill_source', params['bill_source']))  # noqa: E501
            collection_formats['bill_source'] = 'csv'  # noqa: E501
        if 'date_start' in params:
            query_params.append(('date_start', params['date_start']))  # noqa: E501
        if 'date_end' in params:
            query_params.append(('date_end', params['date_end']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'member_id' in params:
            query_params.append(('member_id', params['member_id']))  # noqa: E501
        if 'bill_id' in params:
            query_params.append(('bill_id', params['bill_id']))  # noqa: E501
        if 'bill_no' in params:
            query_params.append(('bill_no', params['bill_no']))  # noqa: E501
        if 'bill_year' in params:
            query_params.append(('bill_year', params['bill_year']))  # noqa: E501
        if 'chamber_id' in params:
            query_params.append(('chamber_id', params['chamber_id']))  # noqa: E501
            collection_formats['chamber_id'] = 'csv'  # noqa: E501
        if 'act_year' in params:
            query_params.append(('act_year', params['act_year']))  # noqa: E501
        if 'act_no' in params:
            query_params.append(('act_no', params['act_no']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/legislation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
